&НаКлиенте
Перем ОбъектДрайвера;

&НаКлиенте
Процедура Пауза(Время) Экспорт

	ВремяЗавершения = ТекущаяДата() + Время;
	Пока ТекущаяДата() < ВремяЗавершения Цикл
	КонецЦикла;

КонецПроцедуры

// Преобразует исходную строку в дату.
//
// Параметры:
//  Значение - Строка - Строка, которую необходимо привести к дате.
//                      Формат даты должен быть в виде "ГГГГ-ММ-ДД чч:мм:сс".
// 
// Возвращаемое значение:
//  Дата - полученная дата.
//
&НаКлиенте
Функция СтрокаВДату(Знач Значение) Экспорт
	
	Значение = СтрЗаменить(Значение, "-", "");
	Значение = СтрЗаменить(Значение, ":", "");
	Значение = СтрЗаменить(Значение, " ", "");
	Значение = СтрЗаменить(Значение, "T", "");
	ОписаниеДаты = Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	Возврат ОписаниеДаты.ПривестиЗначение(Значение)
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьВалютуСчета(ПараметрСчетУчета)
	
	Возврат ПараметрСчетУчета.ВалютаСчета;
	
КонецФункции

&НаСервере
Процедура ОбновитьКурсИКратностьДокумента()
	
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
	
	Объект.КурсВзаиморасчетов = СтруктураКурса.Курс;
	Объект.КратностьВзаиморасчетов = СтруктураКурса.Кратность;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВалютаРегламентированногоУчета = Константы.ОсновнаяВалютаУчета.Получить();
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.МестоРасходовДенежныхСредств = Константы.ОсновноеМестоРасходаДенежныхСредств.Получить();
		Объект.СчетУчета = Константы.ОсновнойСчетУчета.Получить();
		Если ЗначениеЗаполнено(Объект.СчетУчета) Тогда
			Объект.ВалютаДокумента = Объект.СчетУчета.ВалютаСчета;
		КонецЕсли;
		ОбновитьКурсИКратностьДокумента();
		Объект.КодЧека = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьДокументПриИзмененииКурсаИлиКратности()
	
	СтруктураКурсаРеглВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаРегламентированногоУчета, Объект.Дата);
	СтруктураКурсаДокумента = Новый Структура("Валюта, Курс, Кратность", Объект.ВалютаДокумента, Объект.КурсВзаиморасчетов, Объект.КратностьВзаиморасчетов);
	
	Для каждого ТекущаяСтрока Из Объект.Расшифровка Цикл
		ТекущаяСтрока.СуммаВзаиморасчетов = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(ТекущаяСтрока.Сумма, СтруктураКурсаДокумента, СтруктураКурсаРеглВалюты);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УправлениеВидимостью();
	
	ПодключитьСканерШтрихКодов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	ОтключитьСканерШтрихКодов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если Источник = "СканерШтрихкода" И Событие = "ПолученШтрихкод" Тогда
		Объект.КодЧека = Данные;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СформироватьСтруктуруВидимостиДоступности()
	
	Результат = Новый Структура;
	
	Результат.Вставить("ВидимостьСтолбца_СуммаВзаиморасчетов", Объект.ВалютаДокумента <> ВалютаРегламентированногоУчета);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура УправлениеВидимостью()
	
	СтруктураВидиомостиДоступности = СформироватьСтруктуруВидимостиДоступности();
	Элементы.РасшифровкаСуммаВзаиморасчетов.Видимость = СтруктураВидиомостиДоступности.ВидимостьСтолбца_СуммаВзаиморасчетов;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаПриИзменении(Элемент)
	
	Объект.ВалютаДокумента = ПолучитьВалютуСчета(Объект.СчетУчета);
	ВалютаДокументаПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьИтогиДокумента()
	
	Объект.СуммаДокумента = Объект.Расшифровка.Итог("Сумма");
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ПересчитатьИтогиДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПослеУдаления(Элемент)

	ПересчитатьИтогиДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Не Копирование Тогда
		
		ТекущаяСтрока = Элементы.Расшифровка.ТекущиеДанные;
		Если ТекущаяСтрока.Количество = 0 Тогда
			ТекущаяСтрока.Количество = 1;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Расшифровка.ТекущиеДанные;
	ТекущаяСтрока.Сумма = ТекущаяСтрока.Количество * ТекущаяСтрока.Цена;
	
	СтруктураКурсаДокумента = Новый Структура("Валюта, Курс, Кратность", Объект.ВалютаДокумента, Объект.КурсВзаиморасчетов, Объект.КратностьВзаиморасчетов);
	СтруктураКурсаДокументаРегл = УФ_РаботаСКурсамиВалютВызовСервера.ПолучитьКурсВалюты(ВалютаРегламентированногоУчета, Объект.Дата);
	
	ТекущаяСтрока.СуммаВзаиморасчетов = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(ТекущаяСтрока.Сумма, СтруктураКурсаДокумента, СтруктураКурсаДокументаРегл);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаКоличествоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Расшифровка.ТекущиеДанные;
	ТекущаяСтрока.Сумма = ТекущаяСтрока.Количество * ТекущаяСтрока.Цена;
	
	СтруктураКурсаДокумента = Новый Структура("Валюта, Курс, Кратность", Объект.ВалютаДокумента, Объект.КурсВзаиморасчетов, Объект.КратностьВзаиморасчетов);
	СтруктураКурсаДокументаРегл = УФ_РаботаСКурсамиВалютВызовСервера.ПолучитьКурсВалюты(ВалютаРегламентированногоУчета, Объект.Дата);
	
	ТекущаяСтрока.СуммаВзаиморасчетов = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(ТекущаяСтрока.Сумма, СтруктураКурсаДокумента, СтруктураКурсаДокументаРегл);

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаСуммаПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Расшифровка.ТекущиеДанные;
	
	Если ТекущаяСтрока.Количество = 0 Тогда
		ТекущаяСтрока.Количество = 1;
	КонецЕсли;
	
	Если ТекущаяСтрока.Цена = 0 Тогда
		ТекущаяСтрока.Цена = ТекущаяСтрока.Сумма / ТекущаяСтрока.Количество;
	Иначе
		ТекущаяСтрока.Количество = ТекущаяСтрока.Сумма / ТекущаяСтрока.Цена;
	КонецЕсли;
	
	СтруктураКурсаДокумента = Новый Структура("Валюта, Курс, Кратность", Объект.ВалютаДокумента, Объект.КурсВзаиморасчетов, Объект.КратностьВзаиморасчетов);
	СтруктураКурсаДокументаРегл = УФ_РаботаСКурсамиВалютВызовСервера.ПолучитьКурсВалюты(ВалютаРегламентированногоУчета, Объект.Дата);
	
	ТекущаяСтрока.СуммаВзаиморасчетов = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(ТекущаяСтрока.Сумма, СтруктураКурсаДокумента, СтруктураКурсаДокументаРегл);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаСуммаВзаиморасчетовПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Расшифровка.ТекущиеДанные;
	
	СтруктураКурсаДокумента = Новый Структура("Валюта, Курс, Кратность", Объект.ВалютаДокумента, Объект.КурсВзаиморасчетов, Объект.КратностьВзаиморасчетов);
	СтруктураКурсаДокументаРегл = УФ_РаботаСКурсамиВалютВызовСервера.ПолучитьКурсВалюты(ВалютаРегламентированногоУчета, Объект.Дата);
	
	ТекущаяСтрока.Сумма = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(ТекущаяСтрока.СуммаВзаиморасчетов, СтруктураКурсаДокументаРегл, СтруктураКурсаДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОповеститьОбИзменении(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаДокументаПриИзменении(Элемент)
	
	ОбновитьКурсИКратностьДокумента();
	ПересчитатьДокументПриИзмененииКурсаИлиКратности();
	УправлениеВидимостью();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ОбновитьКурсИКратностьДокумента();
	УправлениеВидимостью();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКурсаИлиКратности(Элемент)
	
	ПересчитатьДокументПриИзмененииКурсаИлиКратности();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция Константы_ПортСканера_Получить()
	
	Возврат Константы.ПортСканера.Получить();
	
КонецФункции

&НаСервереБезКонтекста
Функция Константы_ИспользоватьСканерШтрихКода_Получить()
	
	Возврат Константы.ИспользоватьСканерШтрихКода.Получить();
	
КонецФункции

&НаКлиенте
Процедура ПодключитьСканерШтрихКодов()
Перем ТекстОшибки;

	Если НЕ Константы_ИспользоватьСканерШтрихКода_Получить() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ОбъектДрайвера = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		ПодключениеВыполнено = ПодключитьВнешнююКомпоненту("ОбщийМакет.Драйвер1ССканерШтрихкода", "СканерШтрихкода", ТипВнешнейКомпоненты.Native);
		
	Исключение
		
		Инфо = ИнформацияОбОшибке();
		ТекстОшибки = Инфо.Описание;
		
	КонецПопытки;
	
	Если ПодключениеВыполнено Тогда
		
		Попытка
			
			ОбъектДрайвера = Новый("AddIn.СканерШтрихкода.Scanner");
			
		Исключение
			
			Инфо = ИнформацияОбОшибке();
			ТекстОшибки = Инфо.Описание;
			
		КонецПопытки;
		
	Иначе
		
		ТекстОшибки = "Компонента для сканера штрихкодов не загружена";
		
	КонецЕсли;
	
	Если ОбъектДрайвера = Неопределено Тогда
		Сообщить(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	_Параметры = Новый Структура;
	
	_Параметры.Вставить("БитДанных", 8);
	_Параметры.Вставить("Порт",      Константы_ПортСканера_Получить());
	_Параметры.Вставить("Скорость",  9600);
	_Параметры.Вставить("СтопБит",   0);
	_Параметры.Вставить("Префикс",   "");
	_Параметры.Вставить("Суффикс",   "13");
	_Параметры.Вставить("Таймаут",	75);
	_Параметры.Вставить("ТаймаутCOM",   5);
	_Параметры.Вставить("COMКодировка", "UTF-8");
	_Параметры.Вставить("Идентификатор", "'1С:Сканеры штрихкода (COM)'");
	
	
	НовоеПодключение = Новый Структура();
	НовоеПодключение.Вставить("Наименование"            , "'1С:Сканеры штрихкода (COM)'");
	НовоеПодключение.Вставить("Параметры"               , _Параметры);
	НовоеПодключение.Вставить("ПараметрыПодключения"    , Новый Структура());
				
	ВыходныеПараметры = Неопределено;
	
	Результат = ПодключаемоеОборудование1ССканерыШтрихкодаКлиент.ПодключитьУстройство(ОбъектДрайвера, НовоеПодключение.Параметры, НовоеПодключение.ПараметрыПодключения, ВыходныеПараметры);
	
	Если Результат Тогда
		
		//ОписаниеОшибки = НСтр("ru='Ошибок нет.'");
		//Сообщить(ОписаниеОшибки);
		
	Иначе
		// Сообщим пользователю о том, что не удалось подключить устройство.
		ОписаниеОшибки = НСтр("ru='Не удалось подключить устройство ""%Наименование%"": %ОписаниеОшибки% (%КодОшибки%)'");
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%"  , НовоеПодключение.Наименование);
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%КодОшибки%"     , ВыходныеПараметры[0]);
		Сообщить(ОписаниеОшибки);
		ОбъектДрайвера = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьСканерШтрихКодов()
	
	Если ОбъектДрайвера = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПодключаемоеОборудование1ССканерыШтрихкодаКлиент.ОтключитьУстройство(ОбъектДрайвера, Неопределено, Неопределено, Неопределено);

КонецПроцедуры

&НаСервере
Функция ПолучитьТелефонИПарольСервисаПроверкиЧеков(НомерТелефона, Пароль)
	
	НомерТелефона	= "";
	Пароль			= "";
	
	ХранилищеЗначения = ХранилищеОбщихНастроек.Загрузить("СервисПроверкиЧеков", "Параметры");
	
	Если ТипЗнч(ХранилищеЗначения) = тип("ХранилищеЗначения") Тогда
		
		СтруктураПараметров = ХранилищеЗначения.Получить();
		
		НомерТелефона	= СтруктураПараметров.Телефон;
		Пароль			= СтруктураПараметров.Пароль;
		
		Если ПустаяСтрока(НомерТелефона) ИЛИ ПустаяСтрока(Пароль) Тогда
			НомерТелефона	= "";
			Пароль			= "";
			Возврат Ложь;
		КонецЕсли;
		
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьКонтрагента(ИНН)
	
	Если ПустаяСтрока(ИНН) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МестаРасходовДенежныхСредств.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.МестаРасходовДенежныхСредств КАК МестаРасходовДенежныхСредств
		|ГДЕ
		|	МестаРасходовДенежныхСредств.ИНН = &ИНН
		|	И НЕ МестаРасходовДенежныхСредств.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ИНН", ИНН);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не найден контрагент с ИНН "+ИНН);
		
	Иначе
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПриЗавершенииДлительнойОперации(Результат, ДополнительныеПараметры) Экспорт
	
    Если Результат = Неопределено Тогда
        Возврат;
    ИначеЕсли Результат.Статус = "Ошибка" Тогда
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ПодробноеПредставлениеОшибки);
	ИначеЕсли Результат.Статус = "Выполнено" Тогда
		
        // обрабатываем результат
		РезультатВычислений = ПолучитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата);
		
		Если РезультатВычислений.ВыполненоУспешно Тогда
			
			Объект.ТекстОтвета = РезультатВычислений.ТекстОтвета;
			
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(РезультатВычислений.ТекстОтвета);
			Структура = ПрочитатьJSON(ЧтениеJSON);
			ЧтениеJSON.Закрыть();
			
			Объект.Дата = СтрокаВДату(Структура.document.receipt.dateTime);
			
			Объект.Расшифровка.Очистить();
			
			Для Каждого СтрокаЧека Из Структура.document.receipt.items Цикл
				
				НоваяСтрока = Объект.Расшифровка.Добавить();
				
				НоваяСтрока.Цена				= СтрокаЧека.price / 100;
				НоваяСтрока.НоменклатураСтрокой	= СтрокаЧека.name;
				НоваяСтрока.Количество			= СтрокаЧека.quantity;
				НоваяСтрока.Сумма				= СтрокаЧека.sum / 100;
				НоваяСтрока.СуммаВзаиморасчетов	= СтрокаЧека.sum / 100;
				
			КонецЦикла;
			
			Объект.МестоРасходовДенежныхСредств = ПолучитьКонтрагента(Структура.document.receipt.userInn);
			Объект.ЧекРасшифрован = Истина;
			
			ПоказатьНоменклатуруСтрокой = Истина;
			Элементы.РасшифровкаПоказатьНоменклатуруСтрокой.Пометка = ПоказатьНоменклатуруСтрокой;
			Элементы.РасшифровкаНоменклатураСтрокой.Видимость = ПоказатьНоменклатуруСтрокой;
			
		Иначе
			
			ПоказатьПредупреждение(, РезультатВычислений.СообщениеОбОшибке);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
 
&НаСервере
Процедура ЗапуститьДлительныеВычисленияНаСервере()
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ДатаЧека", Объект.ДатаЧека);
	ПараметрыПроцедуры.Вставить("СуммаЧека", Объект.СуммаЧека);
	ПараметрыПроцедуры.Вставить("ВидЧека", Объект.ВидЧека);
	ПараметрыПроцедуры.Вставить("ФН", Объект.ФН);
	ПараметрыПроцедуры.Вставить("ФД", Объект.ФД);
	ПараметрыПроцедуры.Вставить("ФП", Объект.ФП);
	
	// код запуска длительной операции посредством БСП
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Длительное вычисление'");
	// далее в "Новый Структура" можно поместить нужные фоновому заданию параметры
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне("ЗагрузкаДанныхЧека.ПроизвестиДлительноеВычисление", 
									ПараметрыПроцедуры, 
									ПараметрыВыполнения);
										
КонецПроцедуры
								
&НаКлиенте
Процедура РасшифроватьЧек(Команда)
Перем НомерТелефона, Пароль;

	Если НЕ ПолучитьТелефонИПарольСервисаПроверкиЧеков(НомерТелефона, Пароль) Тогда
		ПоказатьПредупреждение(, "В настройках сервиса проверки чека не заданы логин и пароль.");
		Возврат;
	КонецЕсли;
	
	МассивПараметровЧека = СтрРазделить(Объект.КодЧека, "&");
	
	ПараметрыЧека = Новый Структура;
	
	Для Каждого ТекПараметрЧека Из МассивПараметровЧека Цикл
		
		Поз = СтрНайти(ТекПараметрЧека, "=");
		Если Поз > 1 Тогда
			ПараметрыЧека.Вставить(НРег(Лев(ТекПараметрЧека, Поз - 1)), Сред(ТекПараметрЧека, Поз + 1));
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПараметрыЧека.Свойство("t") Тогда
		Чек_Дата = СтрокаВДату(ПараметрыЧека.t);
	Иначе
		ПоказатьПредупреждение(, "В штрих-коде чека нет даты.");
	КонецЕсли;
	
	Если ПараметрыЧека.Свойство("s") Тогда
		Чек_СуммаЧека = Число(ПараметрыЧека.s);
	Иначе
		ПоказатьПредупреждение(, "В штрих-коде чека нет суммы.");
	КонецЕсли;
	
	Если ПараметрыЧека.Свойство("n") Тогда
		Чек_ВидЧека = ПараметрыЧека.n;
	Иначе
		ПоказатьПредупреждение(, "В штрих-коде чека нет вида чека.");
	КонецЕсли;
	
	Если ПараметрыЧека.Свойство("fn") Тогда
		Чек_ФН = ПараметрыЧека.fn;
	Иначе
		ПоказатьПредупреждение(, "В штрих-коде чека нет параметра ФН.");
	КонецЕсли;
	
	Если ПараметрыЧека.Свойство("i") Тогда
		Чек_ФД = ПараметрыЧека.i;
	Иначе
		ПоказатьПредупреждение(, "В штрих-коде чека нет параметра ФД.");
	КонецЕсли;
	
	Если ПараметрыЧека.Свойство("fp") Тогда
		Чек_ФП = ПараметрыЧека.fp;
	Иначе
		ПоказатьПредупреждение(, "В штрих-коде чека нет параметра ФП.");
	КонецЕсли;
	
	Если НЕ (ЗначениеЗаполнено(Чек_Дата) И
		 ЗначениеЗаполнено(Чек_СуммаЧека) И
		 ЗначениеЗаполнено(Чек_ВидЧека) И
		 ЗначениеЗаполнено(Чек_ФН) И
		 ЗначениеЗаполнено(Чек_ФД) И
		 ЗначениеЗаполнено(Чек_ФП)) Тогда
		 
		 ПоказатьПредупреждение(, "Штрих-коде чека содержит пустые поля.");
		 Возврат;
		 
	КонецЕсли;
	
	Объект.Дата = Чек_Дата;
	Объект.ДатаЧека = Чек_Дата;
	Объект.СуммаЧека = Чек_СуммаЧека;
	Объект.ВидЧека = Чек_ВидЧека;
	Объект.ФН = Чек_ФН;
	Объект.ФД = Чек_ФД;
	Объект.ФП = Чек_ФП;
	
	// вызываем серверную процедуру формы для запуска длительной операции
	ЗапуститьДлительныеВычисленияНаСервере();
	
	// инициализируем параметры ожидания (посмотрите документацию, там можно включить режим вывода прогресса выполнения и методами СообщитьПрогресс/ПрочитатьПрогресс указывать прогресс выполнения операции
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтаФорма);
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
	ПараметрыОжидания.Интервал = 1;
	
	// подключаем обработчик ожидания и указываем описание оповещения о завершении задания	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация,
												Новый ОписаниеОповещения("ПриЗавершенииДлительнойОперации", ЭтаФорма),
												ПараметрыОжидания);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНоменклатуруСтрокой(Команда)
	
	ПоказатьНоменклатуруСтрокой = НЕ ПоказатьНоменклатуруСтрокой;
	Элементы.РасшифровкаПоказатьНоменклатуруСтрокой.Пометка = ПоказатьНоменклатуруСтрокой;
	Элементы.РасшифровкаНоменклатураСтрокой.Видимость = ПоказатьНоменклатуруСтрокой;
	
КонецПроцедуры

